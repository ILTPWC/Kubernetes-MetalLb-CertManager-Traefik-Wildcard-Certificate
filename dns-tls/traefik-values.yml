image:
  name: traefik
  tag: ""
  pullPolicy: IfNotPresent

deployment:
  enabled: true
  kind: Deployment
  replicas: 3
  terminationGracePeriodSeconds: 60
  minReadySeconds: 0
  annotations: {}
  labels: {}
  podAnnotations: {}
  podLabels: {}
  additionalContainers: []
  additionalVolumes: []
  initContainers: []
  shareProcessNamespace: false
  imagePullSecrets: []

podDisruptionBudget:
  enabled: false

ingressClass:
  enabled: false
  isDefaultClass: false
  fallbackApiVersion: ""

pilot:
  enabled: false
  token: ""

experimental:
  http3:
    enabled: false
  plugins:
    enabled: false
  kubernetesGateway:
    enabled: false

ingressRoute:
  dashboard:
    enabled: false
    annotations: {}
    labels: {}

rollingUpdate:
  maxUnavailable: 1
  maxSurge: 1

readinessProbe:
  failureThreshold: 1
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2

livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2

providers:
  kubernetesCRD:
    enabled: true
    ingressClass: traefik-external
    allowCrossNamespace: false
    allowExternalNameServices: false
    allowEmptyServices: false
    namespaces: []

  kubernetesIngress:
    enabled: true
    allowExternalNameServices: false
    allowEmptyServices: false
    namespaces: []
    publishedService:
      enabled: false


volumes: []
additionalVolumeMounts: []

logs:
  general:
    level: ERROR
  access:
    enabled: false
    filters: {}
    fields:
      general:
        defaultmode: keep
        names: {}
      headers:
        defaultmode: drop
        names: {}

metrics:
  prometheus:
    entryPoint: metrics

tracing: {}

globalArguments:
  - "--global.checknewversion=false"
  - "--global.sendanonymoususage=false"

additionalArguments: 
  - "--serversTransport.insecureSkipVerify=true"
  - "--log.level=DEBUG"

env: []
envFrom: []


ports:
  web:
    redirectTo: websecure
  websecure:
    tls:
      enabled: true

tlsOptions: {}

service:
  enabled: true
  type: LoadBalancer
  annotations: {}
  annotationsTCP: {}
  annotationsUDP: {}
  labels: {}
  spec:
    loadBalancerIP: 192.168.23.50
  loadBalancerSourceRanges: []
  externalIPs: []

autoscaling:
  enabled: false


persistence:
  enabled: false
  name: data
  accessMode: ReadWriteOnce
  size: 128Mi
  path: /data
  annotations: {}

certResolvers: {}
hostNetwork: false

rbac:
  enabled: true
  namespaced: false

podSecurityPolicy:
  enabled: false

serviceAccount:
  name: ""

serviceAccountAnnotations: {}

resources: {}
affinity: {}
nodeSelector: {}
tolerations: []

priorityClassName: ""

securityContext:
  capabilities:
    drop: [ALL]
  readOnlyRootFilesystem: true
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532

podSecurityContext:
  fsGroup: 65532